// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	gosdk "github.com/hw09234/gosdk/pkg"
	mock "github.com/stretchr/testify/mock"

	peer "github.com/hyperledger/fabric-protos-go/peer"
)

// ChaincodeClient is an autogenerated mock type for the ChaincodeClient type
type ChaincodeClient struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: userName, userConfig
func (_m *ChaincodeClient) AddUser(userName string, userConfig gosdk.UserConfig) error {
	ret := _m.Called(userName, userConfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, gosdk.UserConfig) error); ok {
		r0 = rf(userName, userConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *ChaincodeClient) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCrypto provides a mock function with given fields:
func (_m *ChaincodeClient) GetCrypto() (gosdk.CryptoSuite, error) {
	ret := _m.Called()

	var r0 gosdk.CryptoSuite
	if rf, ok := ret.Get(0).(func() gosdk.CryptoSuite); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gosdk.CryptoSuite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoke provides a mock function with given fields: args, transientMap, cName, ccName, userName
func (_m *ChaincodeClient) Invoke(args []string, transientMap map[string][]byte, cName string, ccName string, userName string) (*gosdk.InvokeResponse, error) {
	ret := _m.Called(args, transientMap, cName, ccName, userName)

	var r0 *gosdk.InvokeResponse
	if rf, ok := ret.Get(0).(func([]string, map[string][]byte, string, string, string) *gosdk.InvokeResponse); ok {
		r0 = rf(args, transientMap, cName, ccName, userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gosdk.InvokeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, map[string][]byte, string, string, string) error); ok {
		r1 = rf(args, transientMap, cName, ccName, userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: args, transientMap, cName, ccName, userName
func (_m *ChaincodeClient) Query(args []string, transientMap map[string][]byte, cName string, ccName string, userName string) (*peer.ProposalResponse, error) {
	ret := _m.Called(args, transientMap, cName, ccName, userName)

	var r0 *peer.ProposalResponse
	if rf, ok := ret.Get(0).(func([]string, map[string][]byte, string, string, string) *peer.ProposalResponse); ok {
		r0 = rf(args, transientMap, cName, ccName, userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*peer.ProposalResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, map[string][]byte, string, string, string) error); ok {
		r1 = rf(args, transientMap, cName, ccName, userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
