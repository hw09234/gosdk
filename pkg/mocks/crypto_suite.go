// Code generated by mockery v2.4.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// CryptoSuite is an autogenerated mock type for the CryptoSuite type
type CryptoSuite struct {
	mock.Mock
}

// CreateCertificateRequest provides a mock function with given fields: enrollmentId, key, hosts
func (_m *CryptoSuite) CreateCertificateRequest(enrollmentId string, key interface{}, hosts []string) ([]byte, error) {
	ret := _m.Called(enrollmentId, key, hosts)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, interface{}, []string) []byte); ok {
		r0 = rf(enrollmentId, key, hosts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, interface{}, []string) error); ok {
		r1 = rf(enrollmentId, key, hosts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateKey provides a mock function with given fields:
func (_m *CryptoSuite) GenerateKey() (interface{}, error) {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFamily provides a mock function with given fields:
func (_m *CryptoSuite) GetFamily() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Hash provides a mock function with given fields: data
func (_m *CryptoSuite) Hash(data []byte) []byte {
	ret := _m.Called(data)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Sign provides a mock function with given fields: msg, key
func (_m *CryptoSuite) Sign(msg []byte, key interface{}) ([]byte, error) {
	ret := _m.Called(msg, key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte, interface{}) []byte); ok {
		r0 = rf(msg, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, interface{}) error); ok {
		r1 = rf(msg, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
