// Code generated by mockery v2.4.0. DO NOT EDIT.

package mocks

import (
	gosdk "github.com/hw09234/gosdk/pkg"
	discovery "github.com/hyperledger/fabric-protos-go/discovery"

	mock "github.com/stretchr/testify/mock"
)

// DiscoveryClient is an autogenerated mock type for the DiscoveryClient type
type DiscoveryClient struct {
	mock.Mock
}

// DiscoveryChannelConfig provides a mock function with given fields: channel
func (_m *DiscoveryClient) DiscoveryChannelConfig(channel string) (*discovery.ConfigResult, error) {
	ret := _m.Called(channel)

	var r0 *discovery.ConfigResult
	if rf, ok := ret.Get(0).(func(string) *discovery.ConfigResult); ok {
		r0 = rf(channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discovery.ConfigResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoveryChannelPeers provides a mock function with given fields: channel
func (_m *DiscoveryClient) DiscoveryChannelPeers(channel string) ([]gosdk.ChannelPeer, error) {
	ret := _m.Called(channel)

	var r0 []gosdk.ChannelPeer
	if rf, ok := ret.Get(0).(func(string) []gosdk.ChannelPeer); ok {
		r0 = rf(channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gosdk.ChannelPeer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoveryEndorsePolicy provides a mock function with given fields: channel, chaincodes, collections
func (_m *DiscoveryClient) DiscoveryEndorsePolicy(channel string, chaincodes []string, collections map[string]string) ([]gosdk.EndorsermentDescriptor, error) {
	ret := _m.Called(channel, chaincodes, collections)

	var r0 []gosdk.EndorsermentDescriptor
	if rf, ok := ret.Get(0).(func(string, []string, map[string]string) []gosdk.EndorsermentDescriptor); ok {
		r0 = rf(channel, chaincodes, collections)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gosdk.EndorsermentDescriptor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string, map[string]string) error); ok {
		r1 = rf(channel, chaincodes, collections)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoveryLocalPeers provides a mock function with given fields:
func (_m *DiscoveryClient) DiscoveryLocalPeers() ([]gosdk.LocalPeer, error) {
	ret := _m.Called()

	var r0 []gosdk.LocalPeer
	if rf, ok := ret.Get(0).(func() []gosdk.LocalPeer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gosdk.LocalPeer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCrypto provides a mock function with given fields:
func (_m *DiscoveryClient) GetCrypto() (gosdk.CryptoSuite, error) {
	ret := _m.Called()

	var r0 gosdk.CryptoSuite
	if rf, ok := ret.Get(0).(func() gosdk.CryptoSuite); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gosdk.CryptoSuite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
