// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	common "github.com/hyperledger/fabric-protos-go/common"
	discovery "github.com/hyperledger/fabric-protos-go/discovery"

	gohfc "github.com/hw09234/gohfc/pkg"

	mock "github.com/stretchr/testify/mock"

	orderer "github.com/hyperledger/fabric-protos-go/orderer"

	parseBlock "github.com/hw09234/gohfc/pkg/parseBlock"

	peer "github.com/hyperledger/fabric-protos-go/peer"
)

// FabricClient is an autogenerated mock type for the FabricClient type
type FabricClient struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: userName, userConfig
func (_m *FabricClient) AddUser(userName string, userConfig gohfc.UserConfig) error {
	ret := _m.Called(userName, userConfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, gohfc.UserConfig) error); ok {
		r0 = rf(userName, userConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUpdateChannel provides a mock function with given fields: channelId, path
func (_m *FabricClient) CreateUpdateChannel(channelId string, path string) error {
	ret := _m.Called(channelId, path)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(channelId, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DiscoveryChannelConfig provides a mock function with given fields: channel
func (_m *FabricClient) DiscoveryChannelConfig(channel string) (*discovery.ConfigResult, error) {
	ret := _m.Called(channel)

	var r0 *discovery.ConfigResult
	if rf, ok := ret.Get(0).(func(string) *discovery.ConfigResult); ok {
		r0 = rf(channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discovery.ConfigResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoveryChannelPeers provides a mock function with given fields: channel
func (_m *FabricClient) DiscoveryChannelPeers(channel string) ([]gohfc.ChannelPeer, error) {
	ret := _m.Called(channel)

	var r0 []gohfc.ChannelPeer
	if rf, ok := ret.Get(0).(func(string) []gohfc.ChannelPeer); ok {
		r0 = rf(channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gohfc.ChannelPeer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoveryEndorsePolicy provides a mock function with given fields: channel, chaincodes, collections
func (_m *FabricClient) DiscoveryEndorsePolicy(channel string, chaincodes []string, collections map[string]string) ([]gohfc.EndorsermentDescriptor, error) {
	ret := _m.Called(channel, chaincodes, collections)

	var r0 []gohfc.EndorsermentDescriptor
	if rf, ok := ret.Get(0).(func(string, []string, map[string]string) []gohfc.EndorsermentDescriptor); ok {
		r0 = rf(channel, chaincodes, collections)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gohfc.EndorsermentDescriptor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string, map[string]string) error); ok {
		r1 = rf(channel, chaincodes, collections)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoveryLocalPeers provides a mock function with given fields:
func (_m *FabricClient) DiscoveryLocalPeers() ([]gohfc.LocalPeer, error) {
	ret := _m.Called()

	var r0 []gohfc.LocalPeer
	if rf, ok := ret.Get(0).(func() []gohfc.LocalPeer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gohfc.LocalPeer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockByNumber provides a mock function with given fields: channelName, blockNum
func (_m *FabricClient) GetBlockByNumber(channelName string, blockNum uint64) (*common.Block, error) {
	ret := _m.Called(channelName, blockNum)

	var r0 *common.Block
	if rf, ok := ret.Get(0).(func(string, uint64) *common.Block); ok {
		r0 = rf(channelName, blockNum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint64) error); ok {
		r1 = rf(channelName, blockNum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockByTxID provides a mock function with given fields: channelName, txID
func (_m *FabricClient) GetBlockByTxID(channelName string, txID string) (*common.Block, error) {
	ret := _m.Called(channelName, txID)

	var r0 *common.Block
	if rf, ok := ret.Get(0).(func(string, string) *common.Block); ok {
		r0 = rf(channelName, txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(channelName, txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockHeight provides a mock function with given fields: channelName
func (_m *FabricClient) GetBlockHeight(channelName string) (uint64, error) {
	ret := _m.Called(channelName)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(string) uint64); ok {
		r0 = rf(channelName)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCrypto provides a mock function with given fields:
func (_m *FabricClient) GetCrypto() (gohfc.CryptoSuite, error) {
	ret := _m.Called()

	var r0 gohfc.CryptoSuite
	if rf, ok := ret.Get(0).(func() gohfc.CryptoSuite); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gohfc.CryptoSuite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNewestBlock provides a mock function with given fields: channelName
func (_m *FabricClient) GetNewestBlock(channelName string) (*common.Block, error) {
	ret := _m.Called(channelName)

	var r0 *common.Block
	if rf, ok := ret.Get(0).(func(string) *common.Block); ok {
		r0 = rf(channelName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByTxID provides a mock function with given fields: channelName, txID
func (_m *FabricClient) GetTransactionByTxID(channelName string, txID string) (*peer.ProcessedTransaction, error) {
	ret := _m.Called(channelName, txID)

	var r0 *peer.ProcessedTransaction
	if rf, ok := ret.Get(0).(func(string, string) *peer.ProcessedTransaction); ok {
		r0 = rf(channelName, txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*peer.ProcessedTransaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(channelName, txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstallChainCode provides a mock function with given fields: peerName, req
func (_m *FabricClient) InstallChainCode(peerName string, req *gohfc.InstallRequest) (*peer.ProposalResponse, error) {
	ret := _m.Called(peerName, req)

	var r0 *peer.ProposalResponse
	if rf, ok := ret.Get(0).(func(string, *gohfc.InstallRequest) *peer.ProposalResponse); ok {
		r0 = rf(peerName, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*peer.ProposalResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *gohfc.InstallRequest) error); ok {
		r1 = rf(peerName, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstantiateChainCode provides a mock function with given fields: policy, req
func (_m *FabricClient) InstantiateChainCode(policy string, req *gohfc.ChainCode) (*orderer.BroadcastResponse, error) {
	ret := _m.Called(policy, req)

	var r0 *orderer.BroadcastResponse
	if rf, ok := ret.Get(0).(func(string, *gohfc.ChainCode) *orderer.BroadcastResponse); ok {
		r0 = rf(policy, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orderer.BroadcastResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *gohfc.ChainCode) error); ok {
		r1 = rf(policy, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoke provides a mock function with given fields: args, transientMap, cName, ccName, userName
func (_m *FabricClient) Invoke(args []string, transientMap map[string][]byte, cName string, ccName string, userName string) (*gohfc.InvokeResponse, error) {
	ret := _m.Called(args, transientMap, cName, ccName, userName)

	var r0 *gohfc.InvokeResponse
	if rf, ok := ret.Get(0).(func([]string, map[string][]byte, string, string, string) *gohfc.InvokeResponse); ok {
		r0 = rf(args, transientMap, cName, ccName, userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gohfc.InvokeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, map[string][]byte, string, string, string) error); ok {
		r1 = rf(args, transientMap, cName, ccName, userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JoinChannel provides a mock function with given fields: channelId, peerName
func (_m *FabricClient) JoinChannel(channelId string, peerName string) (*peer.ProposalResponse, error) {
	ret := _m.Called(channelId, peerName)

	var r0 *peer.ProposalResponse
	if rf, ok := ret.Get(0).(func(string, string) *peer.ProposalResponse); ok {
		r0 = rf(channelId, peerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*peer.ProposalResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(channelId, peerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListenEventFilterBlock provides a mock function with given fields: channelName, startNum, filterBlockCh
func (_m *FabricClient) ListenEventFilterBlock(channelName string, startNum uint64, filterBlockCh chan gohfc.FilteredBlockResponse) chan error {
	ret := _m.Called(channelName, startNum, filterBlockCh)

	var r0 chan error
	if rf, ok := ret.Get(0).(func(string, uint64, chan gohfc.FilteredBlockResponse) chan error); ok {
		r0 = rf(channelName, startNum, filterBlockCh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan error)
		}
	}

	return r0
}

// ListenEventFullBlock provides a mock function with given fields: channelName, startNum, fullBlockCh
func (_m *FabricClient) ListenEventFullBlock(channelName string, startNum uint64, fullBlockCh chan parseBlock.Block) chan error {
	ret := _m.Called(channelName, startNum, fullBlockCh)

	var r0 chan error
	if rf, ok := ret.Get(0).(func(string, uint64, chan parseBlock.Block) chan error); ok {
		r0 = rf(channelName, startNum, fullBlockCh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan error)
		}
	}

	return r0
}

// Query provides a mock function with given fields: args, transientMap, cName, ccName, userName
func (_m *FabricClient) Query(args []string, transientMap map[string][]byte, cName string, ccName string, userName string) (*peer.ProposalResponse, error) {
	ret := _m.Called(args, transientMap, cName, ccName, userName)

	var r0 *peer.ProposalResponse
	if rf, ok := ret.Get(0).(func([]string, map[string][]byte, string, string, string) *peer.ProposalResponse); ok {
		r0 = rf(args, transientMap, cName, ccName, userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*peer.ProposalResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, map[string][]byte, string, string, string) error); ok {
		r1 = rf(args, transientMap, cName, ccName, userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAnchorPeer provides a mock function with given fields: channelId, path
func (_m *FabricClient) UpdateAnchorPeer(channelId string, path string) error {
	ret := _m.Called(channelId, path)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(channelId, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
